/*

  Template ExampleTemplate

  Generated by the GenHTTP document compiler v0.01

*/
using System;
using System.Text;
using System.Collections.Generic;

using GenHTTP.Abstraction;
using GenHTTP.Abstraction.Compiling;

namespace ExampleProject.View {

  internal class ExampleTemplateBase : ITemplateBase {
    private long _ContentLength;
    private Encoding _Encoding;
    private List<byte[]> _Parts;
    private DocumentType _Type = DocumentType.XHtml_1_1_Strict;

    public ExampleTemplateBase() {
      _Encoding = Encoding.GetEncoding("utf-8");
      _Parts = new List<byte[]>(4);
      _Parts.Add(_Encoding.GetBytes("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n\r\n<head>\r\n  <title>"));
      _Parts.Add(_Encoding.GetBytes(" - ExampleProject</title>\r\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"./design/style.css\" />\r\n</head>\r\n\r\n<body>\r\n\r\n<h1>"));
      _Parts.Add(_Encoding.GetBytes("</h1>\r\n"));
      _Parts.Add(_Encoding.GetBytes("</body>\r\n\r\n</html>"));
      _ContentLength = 366;
    }

    public Encoding Encoding {
      get { return _Encoding; }
    }

    public byte[] this[int nr] {
      get { return _Parts[nr]; }
    }

    public long ContentLength {
      get { return _ContentLength; }
    }

    public DocumentType Type {
      get { return _Type; }
    }

  }

  internal class ExampleTemplate : ITemplate {
    private ITemplateBase _Base;
    private List<byte[]> _Content;
    private System.String _Title;
    private System.String _Headline;
    private GenHTTP.Abstraction.Elements.NeutralElement _Value;

    public ExampleTemplate(ITemplateBase baseClass) {
      _Content = new List<byte[]>(3);
      _Base = baseClass;
    }

    public ITemplateBase Base {
      get { return _Base; }
    }

    public System.String Title {
      get { return _Title; }
      set { _Title = value; }
    }

    public System.String Headline {
      get { return _Headline; }
      set { _Headline = value; }
    }

    public GenHTTP.Abstraction.Elements.NeutralElement Value {
      get { return _Value; }
      set { _Value = value; }
    }

    public byte[] ToByteArray() {
      _Content.Add(_Base.Encoding.GetBytes(_Title));
      _Content.Add(_Base.Encoding.GetBytes(_Headline));
      _Content.Add(_Base.Encoding.GetBytes(_Value.Serialize(_Base.Type)));
      long contentLength = 366 + _Content[0].Length + _Content[1].Length + _Content[2].Length;
      byte[] ret = new byte[contentLength];
      int nextPos = 0;
      // Title
      System.Buffer.BlockCopy(_Base[0], 0, ret, nextPos, 218);
      nextPos += _Base[0].Length;
      System.Buffer.BlockCopy(_Content[0], 0, ret, nextPos, _Content[0].Length);
      nextPos += _Content[0].Length;
      // Headline
      System.Buffer.BlockCopy(_Base[1], 0, ret, nextPos, 123);
      nextPos += _Base[1].Length;
      System.Buffer.BlockCopy(_Content[1], 0, ret, nextPos, _Content[1].Length);
      nextPos += _Content[1].Length;
      // Value
      System.Buffer.BlockCopy(_Base[2], 0, ret, nextPos, 7);
      nextPos += _Base[2].Length;
      System.Buffer.BlockCopy(_Content[2], 0, ret, nextPos, _Content[2].Length);
      nextPos += _Content[2].Length;
      System.Buffer.BlockCopy(_Base[3], 0, ret, nextPos, _Base[3].Length);
      return ret;
    }

  }

}

